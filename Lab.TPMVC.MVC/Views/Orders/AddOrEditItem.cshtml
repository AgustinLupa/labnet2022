@model Lab.TPMVC.MVC.Models.ItemWithProductsContainer
@{
    ViewBag.Title = "Order Item";
}

@{
    if (Model.item.ProductName == null)
    {
        <h2>New Order Item</h2>

        using (Html.BeginForm("AddItem", "Orders", FormMethod.Post))
        {

            @Html.AntiForgeryToken()

            @Html.ValidationSummary(true, "", new { @class = "text-danger" })
            <div class="mb-3 form-group">
                @*<label for="select-product" class="form-label">Product</label>
                <select class="dropdown" aria-label="Select a Product" id="select-product">
                        @foreach (var item in Model.products)
                         {
                            <option value="@item.ProductID">@item.ProductName</option>
                         }
                    </select>
                @Html.DropDownListFor(model => model.item.ProductID, Model.products, new { htmlAttributes = new {@class = "form-select", @id = "select-product"} })
                @Html.ValidationMessageFor(model => model.item.ProductID, "", new { @class = "text-danger" })*@

                @Html.LabelFor(model => model.item.ProductID)
                @Html.EditorFor(model => model.item.ProductID, new { htmlAttributes = new { @class = "form-control", @type = "number", @min = "1", @step = "1", @max = "77", @value = "1" } })
                @Html.ValidationMessageFor(model => model.item.ProductID, "", new { @class = "text-danger" })

            </div>
            <div class="mb-3 form-group">
                @Html.LabelFor(model => model.item.UnitPrice)
                @Html.EditorFor(model => model.item.UnitPrice, new { htmlAttributes = new { @class = "form-control", @type = "number", @min = "0.00", @step = "1", @max = "10000", @value = "0" } })
                @Html.ValidationMessageFor(model => model.item.UnitPrice, "", new { @class = "text-danger" })
            </div>
            <div class="mb-3 form-group">
                @Html.LabelFor(model => model.item.Quantity)
                @Html.EditorFor(model => model.item.Quantity, new { htmlAttributes = new { @class = "form-control", @type = "number", @min = "1", @step = "1", @max = "10000" } })
                @Html.ValidationMessageFor(model => model.item.Quantity, "", new { @class = "text-danger" })
            </div>
            <div class="mb-3 form-group">
                @Html.LabelFor(model => model.item.Discount)
                @Html.EditorFor(model => model.item.Discount, new { htmlAttributes = new { @class = "form-control", @type = "number", @min = "0.00", @step = "0.10", @max = "1.00" } })
                @Html.ValidationMessageFor(model => model.item.UnitPrice, "", new { @class = "text-danger" })
            </div>
            <button type="submit" class="btn btn-primary">Add Item</button>
        }
    }
    else
    {

        <h2>Edit Order Item</h2>

        using (Html.BeginForm("EditItem", "Orders", FormMethod.Post))
        {

            @Html.AntiForgeryToken()

            @Html.ValidationSummary(true, "", new { @class = "text-danger" })
            <div class="mb-3 form-group">
                <label for="select-product" class="form-label">Product</label>

                @Html.LabelFor(model => model.item.ProductID)
                @Html.EditorFor(model => model.item.ProductID, new { htmlAttributes = new { @class = "form-control", @type = "number", @id = "select-product", @readonly = "readonly", @min = "1", @step = "1", @max = "77" } })
               
            </div>
            <div class="mb-3 form-group">
                @Html.LabelFor(model => model.item.UnitPrice)
                @Html.EditorFor(model => model.item.UnitPrice, new { htmlAttributes = new { @class = "form-control", @type = "number", @min = "0.00", @step = "1", @max = "10000" } })
                @Html.ValidationMessageFor(model => model.item.UnitPrice, "", new { @class = "text-danger" })
            </div>
            <div class="mb-3 form-group">
                @Html.LabelFor(model => model.item.Quantity)
                @Html.EditorFor(model => model.item.Quantity, new { htmlAttributes = new { @class = "form-control", @type = "number", @min = "1", @step = "1", @max = "10000" } })
                @Html.ValidationMessageFor(model => model.item.Quantity, "", new { @class = "text-danger" })
            </div>
            <div class="mb-3 form-group">
                @Html.LabelFor(model => model.item.Discount)
                @Html.EditorFor(model => model.item.Discount, new { htmlAttributes = new { @class = "form-control", @type = "number", @min = "0.00", @step = "0.10", @max = "1.00" } })
                @Html.ValidationMessageFor(model => model.item.UnitPrice, "", new { @class = "text-danger" })
            </div>
            <button type="submit" class="btn btn-primary">Edit Item</button>
        }
    }

}
